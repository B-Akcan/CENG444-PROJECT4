     1                                     BITS 64
     2                                     SECTION .text
     3                                     global main
     4                                  main:
     5                                     ; For allocation on stack (prologue)
     6 00000000 55                         push rbp
     7 00000001 4889E5                     mov rbp, rsp
     8 00000004 4881EC00400000             sub rsp, 4000h
     9 0000000B 4154                       push r12
    10                                  
    11                                     ; For deallocation on stack (epilogue)
    12 0000000D 415C                       pop r12
    13 0000000F 4881C400400000             add rsp, 4000h
    14 00000016 4889EC                     mov rsp, rbp
    15 00000019 5D                         pop rbp
    16 0000001A C3                         ret
    17                                     ; This is for exception unwinding return
    18 0000001B 4889EC                     mov rsp, rbp
    19 0000001E 5D                         pop rbp
    20 0000001F C3                         ret
    21                                  
    22                                     ; Enter and leave instructions
    23 00000020 C8004000                   enter 4000h, 0
    24 00000024 C9                         leave
    25                                  
    26                                     ; For double const
    27 00000025 48B8000000000000F8-        mov rax, __float64__(1.5)
    27 0000002E 3F                 
    28 0000002F 50                         push rax
    29                                  
    30                                     ; For integer const (note: there is no immediate 64 bit push)
    31                                     ; We need this only for booleans! Note that each instruction pushes a machine word (qword)
    32                                     ; regardless the size of the immediate value.
    33 00000030 6A02                       push 2h
    34 00000032 6800020000                 push 200h
    35 00000037 6800000200                 push 20000h
    36                                  
    37                                     ; For string consts, which are returned by allocstring (lrt 3)
    38 0000003C 48BF00000000020000-        mov rdi, 0x200000000    ; This is to emulate the string pointer generated by the compiler
    38 00000045 00                 
    39 00000046 48B800000000040000-        mov rax, 0x400000000    ; This is to emulate the static LRT function in DGEval
    39 0000004F 00                 
    40 00000050 4989E4                     mov r12, rsp            ; r12 is saved across calls
    41 00000053 4883E4F0                   and rsp, 0fffffffffffffff0h
    42 00000057 FFD0                       call rax
    43 00000059 50                         push rax                ; Return value is in rax
    44 0000005A 4C89E4                     mov rsp, r12
    45                                  
    46                                     ; For insid
    47 0000005D FFB500020000               push qword [rbp + 512] ; 512 here represents the calculated ebp based offset of the variable
    48 00000063 FFB508020000               push qword [rbp + 520]
    49                                  
    50                                     ; For OP_MINUS
    51 00000069 48B800000000000000-        mov rax, 0x8000000000000000
    51 00000072 80                 
    52 00000073 48310424                   xor [rsp], rax
    53 00000077 F20F100424                 movsd xmm0, [rsp]
    54                                  
    55                                     ; For OP_NOT
    56 0000007C B801000000                 mov rax, 1h
    57 00000081 48310424                   xor [rsp], rax
    58 00000085 F20F100424                 movsd xmm0, [rsp]
    59                                  
    60                                     ; For OP_BOR and OP_AND
    61 0000008A 58                         pop rax
    62 0000008B 48090424                   or [rsp], rax
    63 0000008F 48210424                   and [rsp], rax
    64                                  
    65                                     ; For logical operations
    66 00000093 488B442408                 mov rax, [rsp+8]
    67 00000098 480B0424                   or rax, [rsp]
    68 0000009C 48230424                   and rax, [rsp]
    69 000000A0 4883C408                   add rsp, 8
    70 000000A4 48890424                   mov [rsp], rax
    71                                  
    72                                     ; For arithmetic operations
    73 000000A8 F20F10442408               movsd xmm0, [rsp+8]
    74 000000AE F20F580424                 addsd xmm0, [rsp]
    75 000000B3 F20F590424                 mulsd xmm0, [rsp]
    76 000000B8 F20F5E0424                 divsd xmm0, [rsp]
    77 000000BD F20F5C0424                 subsd xmm0, [rsp]
    78 000000C2 660F2F0424                 comisd xmm0, [rsp]
    79 000000C7 4883C408                   add rsp, 8
    80 000000CB F20F110424                 movsd [rsp], xmm0
    81                                  
    82                                     ; For assign
    83 000000D0 488B0424                   mov rax, [rsp]
    84 000000D4 48898500020000             mov [rbp+512], rax
    85                                  
    86                                     ; For pop n (suppose n*8 is 520)
    87 000000DB 4881C408020000             add rsp, 520
    88                                  
    89                                     ; For popping rax
    90 000000E2 58                         pop rax
    91                                  
    92 000000E3 4889C7                     mov rdi, rax
    93 000000E6 4889C6                     mov rsi, rax
    94 000000E9 4889C2                     mov rdx, rax
    95 000000EC 4889C1                     mov rcx, rax
    96                                  
    97 000000EF 66480F6EC0                 movq xmm0, rax
    98 000000F4 66480F6EC8                 movq xmm1, rax
    99 000000F9 66480F6ED0                 movq xmm2, rax
   100 000000FE 66480F6ED8                 movq xmm3, rax
   101 00000103 66480F6EE0                 movq xmm4, rax
   102 00000108 66480F6EE8                 movq xmm5, rax
   103 0000010D 66480F6EF0                 movq xmm6, rax
   104 00000112 66480F6EF8                 movq xmm7, rax
   105                                  
   106                                     ; For preparation of the first operand to a call
   107 00000117 488B3C24                   mov rdi, [rsp]
   108 0000011B 488B7C2408                 mov rdi, [rsp+8]
   109 00000120 F20F100424                 movsd xmm0, [rsp]
   110 00000125 F20F10442408               movsd xmm0, [rsp+8]
   111                                  
   112                                     ; For preparation of the second operand to a call
   113 0000012B 488B3424                   mov rsi, [rsp]
   114 0000012F 488B742408                 mov rsi, [rsp+8]
   115 00000134 F20F100C24                 movsd xmm1, [rsp]
   116 00000139 F20F104C2408               movsd xmm1, [rsp+8]
   117                                  
   118                                     ; For preparation of the third operand to a call
   119 0000013F 488B1424                   mov rdx, [rsp]
   120 00000143 488B542408                 mov rdx, [rsp+8]
   121 00000148 F20F101424                 movsd xmm2, [rsp]
   122 0000014D F20F10542408               movsd xmm2, [rsp+8]
   123                                  
   124                                     ; For preparation of the fourth operand to a call
   125 00000153 488B0C24                   mov rcx, [rsp]
   126 00000157 488B4C2408                 mov rcx, [rsp+8]
   127 0000015C F20F101C24                 movsd xmm3, [rsp]
   128 00000161 F20F105C2408               movsd xmm3, [rsp+8]
   129                                  
   130                                     ; For preparation of the fourth operand to a call
   131 00000167 48B8000000000000F8-        mov rax, __float64__(1.5)
   131 00000170 3F                 
   132 00000171 66480F6EC0                 movq xmm0, rax
   133 00000176 66480F6EC8                 movq xmm1, rax
   134 0000017B 66480F6ED0                 movq xmm2, rax
   135 00000180 66480F6ED8                 movq xmm3, rax
   136                                  
   137                                  
   138                                     ; Immediate integral parameters
   139 00000185 48BF00000000040000-        mov   rdi, 0x400000000
   139 0000018E 00                 
   140 0000018F 48BE00000000040000-        mov   rsi, 0x400000000
   140 00000198 00                 
   141 00000199 48BA00000000040000-        mov   rdx, 0x400000000
   141 000001A2 00                 
   142 000001A3 48B900000000040000-        mov   rcx, 0x400000000
   142 000001AC 00                 
   143                                  
   144                                     ; Pushing return values
   145 000001AD 66480F7EC0                 movq rax, xmm0
   146 000001B2 50                         push rax
   147                                  
   148                                     ; **** Implementing comparison operators
   149                                     ; Double precision
   150 000001B3 4831C9                     xor rcx, rcx
   151 000001B6 4883C410                   add rsp, 16
   152 000001BA F20F104424F8               movsd xmm0, [rsp-8]
   153 000001C0 660F2F4424F0               comisd xmm0, [rsp-16]
   154                                  
   155                                     ; Integral type
   156 000001C6 5F                         pop rdi
   157 000001C7 58                         pop rax
   158 000001C8 4839F8                     cmp rax, rdi
   159                                  
   160                                     ; String comparison (after strcmp returns)
   161 000001CB 4883F800                   cmp rax, 0
   162                                  
   163                                     ; gt
   164 000001CF 7E05                       jle l1
   165 000001D1 7603                       jbe l1 ; case for comisd
   166 000001D3 48FFC1                     inc rcx
   167                                  l1:
   168 000001D6 51                         push rcx
   169                                  
   170                                     ; gte
   171 000001D7 7C05                       jl l2
   172 000001D9 7203                       jb l2 ; case for comisd
   173 000001DB 48FFC1                     inc rcx
   174                                  l2:
   175                                     ; lt
   176 000001DE 7D05                       jge l3
   177 000001E0 7303                       jae l3 ; case for comisd
   178 000001E2 48FFC1                     inc rcx
   179                                  l3:
   180                                     ; lte
   181 000001E5 7F05                       jg l4
   182 000001E7 7703                       ja l4 ; case for comisd
   183 000001E9 48FFC1                     inc rcx
   184                                  l4:
   185                                     ; eq
   186 000001EC 7503                       jne l5
   187 000001EE 48FFC1                     inc rcx
   188                                  l5:
   189                                     ; neq
   190 000001F1 7403                       je l6
   191 000001F3 48FFC1                     inc rcx
   192                                  l6:
   193                                  
   194                                     ; **** Implementing comparison operators ends
   195                                     ; Condition evaluation for JT
   196 000001F6 58                         pop rax
   197 000001F7 4809C0                     or rax, rax
   198 000001FA 75DA                       jnz l1 ; for JT
   199 000001FC 74D8                       jz l1  ; for LF
   200                                  
   201                                     ; Calculating array base for allocate array / Elements in reverse order
   202 000001FE 4889E1                     mov rcx, rsp
   203                                  
   204                                     ; Adding rsp a long value (Used to cleanup the stack for "allocatearray"
   205 00000201 4881C400000040             add rsp, 0x40000000
   206                                  
   207                                     ; Converting the second parameter of arrayelement
   208 00000208 F2480F2DD0                 cvtsd2si rdx, xmm0
   209                                  
